using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using TMPro;
using UnityEditor;

[System.Serializable]
public class SubtitleEntry
{
    public float duration;
    public string speakerName;
    public string subtitle;
    public AudioClip audioClip;
}

public class SubtitleManager : MonoBehaviour
{
    public bool showSubtitles = false;
    public TMP_Text subtitleText;
    public List<SubtitleEntry> subtitles = new List<SubtitleEntry>();

    private float displayEndTime;
    private int currentSubtitleIndex = -1;
    private AudioSource audioSource;

    void Start()
    {
        subtitleText.gameObject.SetActive(false);
        audioSource = gameObject.AddComponent<AudioSource>();
    }

    void Update()
    {
        if (showSubtitles)
        {
            float timer = Time.timeSinceLevelLoad;

            if (currentSubtitleIndex < subtitles.Count)
            {
                if (currentSubtitleIndex >= 0)
                {
                    if (timer >= displayEndTime)
                    {
                        HideSubtitle();
                    }
                }

                if (currentSubtitleIndex + 1 < subtitles.Count && timer >= displayEndTime)
                {
                    currentSubtitleIndex++;
                    var nextSubtitle = subtitles[currentSubtitleIndex];
                    DisplaySubtitle(nextSubtitle.subtitle, nextSubtitle.duration, nextSubtitle.speakerName, nextSubtitle.audioClip);
                }
            }
        }
        else
        {
            HideSubtitle();
        }
    }

    public void DisplaySubtitle(string text, float duration, string speakerName = "", AudioClip audioClip = null)
    {
        if (!string.IsNullOrEmpty(speakerName))
        {
            subtitleText.text = $"{speakerName}: {text}";
        }
        else
        {
            subtitleText.text = text;
        }
        subtitleText.gameObject.SetActive(true);
        displayEndTime = Time.timeSinceLevelLoad + duration;

        if (audioClip != null)
        {
            audioSource.clip = audioClip;
            audioSource.Play();
        }
    }

    public void HideSubtitle()
    {
        subtitleText.gameObject.SetActive(false);
        if (audioSource.isPlaying)
        {
            audioSource.Stop();
        }
    }

    public void LoadSubtitlesFromFile(string filePath)
    {
        string[] lines = File.ReadAllLines(filePath);
        string timePart = "";
        string subtitleText = "";
        string speakerName = "";
        string audioFilePath = "";

        foreach (string line in lines)
        {
            string trimmedLine = line.Trim();

            if (trimmedLine.StartsWith("[DURATION=\"") && trimmedLine.EndsWith("\"]"))
            {
                timePart = trimmedLine.Replace("[DURATION=\"", "").Replace("\"]", "").Trim();
            }
            else if (trimmedLine.StartsWith("[SPEAKER=\"") && trimmedLine.EndsWith("\"]"))
            {
                speakerName = trimmedLine.Replace("[SPEAKER=\"", "").Replace("\"]", "").Trim();
            }
            else if (trimmedLine.StartsWith("[SUBTITLE=\"") && trimmedLine.EndsWith("\"]"))
            {
                subtitleText = trimmedLine.Replace("[SUBTITLE=\"", "").Replace("\"]", "").Trim();
            }
            else if (trimmedLine.StartsWith("[AUDIO_FILE=\"") && trimmedLine.EndsWith("\"]"))
            {
                audioFilePath = trimmedLine.Replace("[AUDIO_FILE=\"", "").Replace("\"]", "").Trim();
            }
            else if (!string.IsNullOrEmpty(trimmedLine))
            {
                Debug.LogWarning("Unrecognized format in line: " + trimmedLine);
            }

            if (!string.IsNullOrEmpty(timePart) && !string.IsNullOrEmpty(subtitleText))
            {
                float durationInSeconds = ParseTimeToSeconds(timePart);

                AudioClip audioClip = null;
                if (!string.IsNullOrEmpty(audioFilePath))
                {
                    string targetAudioPath = Path.Combine("Assets/AudioClips", Path.GetFileName(audioFilePath));
                    if (File.Exists(audioFilePath))
                    {
                        File.Copy(audioFilePath, targetAudioPath, true);
                        audioClip = AssetDatabase.LoadAssetAtPath<AudioClip>(targetAudioPath);
                    }
                }

                if (!SubtitleExists(durationInSeconds, subtitleText))
                {
                    subtitles.Add(new SubtitleEntry
                    {
                        duration = durationInSeconds,
                        subtitle = subtitleText,
                        speakerName = speakerName,
                        audioClip = audioClip
                    });
                    Debug.Log($"Subtitle added: {durationInSeconds}s - {speakerName}: {subtitleText}, Audio: {audioFilePath}");
                }

                timePart = "";
                subtitleText = "";
                speakerName = "";
                audioFilePath = "";
            }
        }

        Debug.Log("Subtitles loaded: " + subtitles.Count);
    }

    private bool SubtitleExists(float duration, string text)
    {
        foreach (var entry in subtitles)
        {
            if (entry.duration == duration && entry.subtitle == text)
            {
                return true;
            }
        }
        return false;
    }

    private float ParseTimeToSeconds(string time)
    {
        string[] timeParts = time.Split(':');
        if (timeParts.Length == 2)
        {
            int minutes = int.Parse(timeParts[0]);
            int seconds = int.Parse(timeParts[1]);
            return minutes * 60 + seconds;
        }
        else
        {
            Debug.LogError("Time format is incorrect: " + time);
            return 0;
        }
    }
}
